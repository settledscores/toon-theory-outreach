name: Extract Core Offerings

on:
  workflow_dispatch:

concurrency:
  group: extract-core-offerings
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  extract:
    runs-on: ubuntu-latest

    env:
      GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/*.py', '**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -U groq python-dotenv

      - name: Run extract_services.py
        run: python extract_services.py

      - name: Commit updated leads
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add leads/scraped_leads.ndjson
          git commit -m "üîç Auto-update services from Groq [bot]" || echo "No changes"
          git pull --rebase origin main || true
          git push

      - name: Emergency commit in case of crash
        if: always()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add leads/scraped_leads.ndjson
          git diff --cached --quiet || git commit -m "üßØ Emergency save after Groq crash [bot]"
          git pull --rebase origin main || true
          git push || echo "‚ùó Emergency push failed"
